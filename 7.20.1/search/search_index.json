{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This library aims to provide a REST client for Camunda Platform 7 REST API for SpringBoot. In doing so it offers \"remote\" implementations of  Camunda Platform 7 Engine Java API. This project is highly iterative and releases the functionality in small increments. Please check the support matrix to find out if the functionality you require is already supported by the library.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":"<p>If you just want to start using the library, please consult our Getting Started guide.</p>"},{"location":"index.html#working-example","title":"Working Example","text":"<p>We provide a working example demonstrating some features of the library. See our Examples section for usage and configuration.</p>"},{"location":"index.html#user-guide","title":"User Guide","text":"<p>If you have any questions regarding configuration of Camunda BPM Feign please have a look at our User Guide.</p>"},{"location":"index.html#contribution","title":"Contribution","text":"<p>If you want to contribute to this project, feel free to do so. Start with Contributing guide.</p>"},{"location":"getting-started.html","title":"Getting started","text":"<p>Note</p> <p>If you are using the extension from an application containing Camunda BPM Engine classes on the classpath, please check the Working Example section of our user guide.</p> <p>Note</p> <p>You can also use the generated feign clients directly without using the Camunda Services. Please check out the Feign Example section of our user guide.</p>"},{"location":"getting-started.html#install-dependency","title":"Install Dependency","text":"<p>First install the extension dependency and configure Feign and Feign client:</p> <pre><code>&lt;properties&gt;\n  &lt;camunda-platform-7-rest-client-spring-boot.version&gt;7.20.0-SNAPSHOT&lt;/camunda-platform-7-rest-client-spring-boot.version&gt;\n  &lt;spring-cloud.version&gt;2022.0.4&lt;/spring-cloud.version&gt;\n&lt;/properties&gt;\n\n&lt;dependencyManagement&gt;\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n    &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n    &lt;type&gt;pom&lt;/type&gt;\n    &lt;scope&gt;import&lt;/scope&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.rest&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-platform-7-rest-client-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;${camunda-platform-7-rest-client-spring-boot.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;\n  &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <p>Note</p> <p>Please make sure your Spring Cloud version matches your Spring Boot version as described in the Spring Cloud documentation</p>"},{"location":"getting-started.html#configuration","title":"Configuration","text":"<p>In your client code, activate the usage of REST client by adding the following annotation to your configuration:</p> <pre><code>@Configuration\n@EnableCamundaRestClient\npublic class MyClientConfiguration {\n\n}\n</code></pre> <p>In order to configure the Feign client, make sure to provide usual feign client configuration (e.g. using <code>application.yml</code>). To set up the engine base URL, please set up the properties:</p> <pre><code>feign:\n  client:\n    config:\n      default:\n        url: \"http://your-process-engine-host/engine-rest/\"\n</code></pre> <p>There is also the possibility to configure a different URL for each feign client (even though this is a very uncommon setup):</p> <pre><code>feign:\n  client:\n    config:\n      processInstance:\n        url: \"http://your-process-engine-host/engine-rest/\"\n      processDefinition:\n        url: \"http://your-process-engine-host/engine-rest/\"\n      message:\n        url: \"http://your-process-engine-host/engine-rest/\"\n      ...\n</code></pre>"},{"location":"getting-started.html#usage","title":"Usage","text":"<p>To access the remote API, inject the remote API implementation:</p> <pre><code>@Component\npublic class MyClient {\n\n  private RuntimeService runtimeService;\n\n  public MyClient(@Qualifier(\"remote\") RuntimeService runtimeService) {\n    this.runtimeService = runtimeService;\n  }\n\n  public void start() {\n    this.runtimeService\n      .startProcessInstanceByKey(\"my_process_key\");\n  }\n\n  public void correlate() {\n    this.runtimeService\n      .createMessageCorrelation(\"message_received\")\n      .processInstanceBusinessKey(\"WAIT_FOR_MESSAGE\")\n      .correlateAllWithResult();\n  }\n}\n</code></pre>"},{"location":"developer-guide/contribution.html","title":"Contributing","text":"<p>There are several ways in which you may contribute to this project.</p> <ul> <li>File issues</li> <li>Submit a pull requests</li> </ul>"},{"location":"developer-guide/contribution.html#found-a-bug-or-missing-feature","title":"Found a bug or missing feature?","text":"<p>Please file an issue in our issue tracking system.</p>"},{"location":"developer-guide/contribution.html#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>If you found a solution to an open issue and implemented it, we would be happy to add your contribution in the code base. For doing so, please create a pull request. Prior to that, please make sure you</p> <ul> <li>rebased against the <code>develop</code> branch</li> <li>stick to project coding conventions</li> <li>added test cases for the problem you are solving</li> <li>added docs, describing the change</li> <li>generally comply with codeacy report</li> </ul>"},{"location":"developer-guide/project-setup.html","title":"Project Setup","text":"<p>If you are interested in developing and building the project please read the following the instructions carefully.</p>"},{"location":"developer-guide/project-setup.html#version-control","title":"Version control","text":"<p>To get sources of the project, please execute:</p> <pre><code>git clone https://github.com/camunda-communit-hub/camunda-platform-7-rest-client-spring-boot.git\ncd camunda-platform-7-rest-client-spring-boot\n</code></pre> <p>We are using gitflow in our git SCM for naming b ranches. That means that you should start from <code>master</code> branch, create a <code>feature/&lt;name&gt;</code> out of it and once it is completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if possible.</p>"},{"location":"developer-guide/project-setup.html#project-build","title":"Project Build","text":"<p>Perform the following steps to get a development setup up and running.</p> <pre><code>./mvnw clean install\n</code></pre>"},{"location":"developer-guide/project-setup.html#integration-tests","title":"Integration Tests","text":"<p>By default, the build command will ignore the run of <code>failsafe</code> Maven plugin executing the integration tests (usual JUnit tests with class names ending with ITest). In order to run integration tests, please call from your command line:</p> <pre><code>./mvnw -Pitest failsafe:verify\n</code></pre>"},{"location":"developer-guide/project-setup.html#project-build-modes-and-profiles","title":"Project build modes and profiles","text":""},{"location":"developer-guide/project-setup.html#camunda-version","title":"Camunda Version","text":"<p>You can choose the used Camunda version by specifying the profile <code>camunda-ee</code> or <code>camunda-ce</code>. The default version is a Community Edition. Specify <code>-Pcamunda-ee</code> to switch to Camunda Enterprise edition. This will require a valid Camunda license. You can put it into a file <code>~/.camunda/license.txt</code> and it will be detected automatically.</p>"},{"location":"developer-guide/project-setup.html#documentation","title":"Documentation","text":"<p>We are using MkDocs for generation of a static site documentation and rely on markdown as much as possible.</p> <p>Note</p> <p>If you want to develop your docs in 'live' mode, run <code>mkdocs serve</code> and access the http://localhost:8000/ from your browser.</p> <p>For creation of documentation, please run:</p>"},{"location":"developer-guide/project-setup.html#generation-of-javadoc-and-sources","title":"Generation of JavaDoc and Sources","text":"<p>By default, the sources and javadoc API documentation are not generated from the source code. To enable this:</p> <pre><code>./mvnw clean install -Pcommunity-action-maven-release -Dgpg.skip=true\n</code></pre>"},{"location":"developer-guide/project-setup.html#starting-example-applications","title":"Starting example applications","text":"<p>To start applications, either use your IDE and create run configuration for the class:</p> <ul> <li><code>org.camunda.community.rest.example.standalone.CamundaRestClientExampleApplication</code></li> <li><code>org.camunda.community.rest.example.processapplication.CamundaRestClientExampleApplicationWithEngineProvided</code></li> </ul> <p>Alternatively, you can run them from the command line:</p> <pre><code>./mvn spring-boot:run -f examples/example\n./mvn spring-boot:run -f examples/example-provided\n</code></pre>"},{"location":"developer-guide/project-setup.html#continuous-integration","title":"Continuous Integration","text":"<p>GitHub Actions are building all branches on commit hook (for codecov). In addition, a GitHub Actions are used to build PRs and all branches.</p>"},{"location":"developer-guide/project-setup.html#release-management","title":"Release Management","text":"<p>The release is produced by using the GitHub feature to \"Publish a Release\". To do so, please \"close a milestone\" and a special action will generate automatically collected issues and PRs to generate the Release notes. It will create a tag, which will be built if this release get published. Now \"Publish release\" and the GH action will create a new release and publish it into Camunda Artifactory and Maven Central Staging. To  release it to the public, please create an issue and assign it to someone of Camunda @camunda-community-hub/devrel</p>"},{"location":"developer-guide/project-setup.html#what-modules-get-deployed-to-repository","title":"What modules get deployed to repository","text":"<p>Every Maven module is enabled by default. If you want to change this, please provide the property</p> <pre><code>&lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;\n</code></pre> <p>inside the corresponding <code>pom.xml</code>. Currently, all <code>examples</code> are EXCLUDED from publication into Maven Central.</p>"},{"location":"introduction/index.html","title":"Start here","text":"<p>If you are visiting this project for the first time, please check the following sections:</p> <ul> <li>Motivation</li> <li>Features</li> <li>Solution Strategy</li> <li>Further Outlook</li> </ul>"},{"location":"introduction/features.html","title":"Features","text":"<p>The library supports the following features:</p>"},{"location":"introduction/features.html#general","title":"General","text":"<ul> <li>Usage of Open Feign library to allow for high-customizable REST client (generated from camunda openapi definition) </li> <li>Provides a SpringBoot starter for usage in standalone client mode</li> <li>Provides a SpringBoot starter for usage inside a process application</li> <li>Decode HTTP error response and simulate exceptions, as if they are thrown locally by the service.</li> <li>Implemented Services: <code>RuntimeService</code>, <code>RepositoryService</code>, <code>TaskService</code>, <code>ExternalTaskService</code>, <code>HistoryService</code></li> </ul>"},{"location":"introduction/features.html#runtimeservice","title":"RuntimeService","text":"<ul> <li>Process start by key: <code>#startProcessInstanceByKey()</code></li> <li>Process start by id: <code>#startProcessInstanceById()</code></li> <li>Process instance query: <code>#createProcessInstanceQuery()</code></li> <li>Message correlation: <code>#correlateMessage()</code>, <code>#createMessageCorrelation()</code></li> <li>Signal event: <code>#signalEventReceived()</code>, <code>#createSignalEvent()</code></li> <li>Execution trigger: <code>#signal()</code></li> <li>Read variables: <code>#getVariable()</code>,<code>#getVariables()</code>, <code>#getVariableTyped()</code>, <code>#getVariablesTyped()</code></li> <li>Read local variables: <code>#getVariableLocal()</code>,<code>#getVariablesLocal()</code>, <code>#getVariableLocalTyped()</code>, <code>#getVariablesLocalTyped()</code></li> <li>Write variables: <code>#setVariable()</code>,<code>#setVariables()</code>, <code>#setVariableTyped()</code>, <code>#setVariablesTyped()</code></li> <li>Delete variables: <code>#removeVariable()</code>,<code>#removeVariables()</code></li> <li>Write local variables: <code>#setVariableLocal()</code>,<code>#setVariablesLocal()</code>, <code>#setVariableLocalTyped()</code>, <code>#setVariablesLocalTyped()</code></li> <li>Delete local variables: <code>#removeVariableLocal()</code>,<code>#removeVariablesLocal()</code></li> <li>Incident query: <code>#createIncidentQuery()</code></li> <li>Create/Resolve incidents: <code>#createIncident()</code>, <code>#resolveIncident()</code></li> <li>Annotations for incidents: <code>#setAnnotationForIncidentById()</code>, <code>#clearAnnotationForIncidentById()</code></li> <li>Activate/Suspend process instances by definition key: <code>#suspendProcessInstanceByProcessDefinitionKey()</code>, <code>#activateProcessInstanceByProcessDefinitionKey()</code></li> <li>Activate/Suspend process instances by definition id: <code>#suspendProcessInstanceByProcessDefinitionId()</code>, <code>#activateProcessInstanceByProcessDefinitionId()</code></li> <li>Activate/Suspend process instances: <code>#suspendProcessInstanceById()</code>, <code>#activateProcessInstanceById()</code></li> <li>Update process instance suspension state: <code>#updateProcessInstanceSuspensionState()</code></li> <li>Delete process instances: <code>#deleteProcessInstance()</code>, <code>#deleteProcessInstanceIfExists()</code>, <code>#deleteProcessInstances()</code>, <code>#deleteProcessInstancesIfExists()</code>, <code>#deleteProcessInstancesAsync()</code></li> <li>Create event subscription query: <code>#createEventSubscriptionQuery()</code></li> <li>Create execution query: <code>#createExecutionQuery()</code></li> </ul>"},{"location":"introduction/features.html#repositoryservice","title":"RepositoryService","text":"<ul> <li>Query for process definitions: <code>#createProcessDefinitionQuery()</code></li> <li>History time to live: <code>#updateDecisionDefinitionHistoryTimeToLive()</code>, <code>#updateProcessDefinitionHistoryTimeToLive()</code></li> <li>Create deployment: <code>#createDeployment()</code></li> <li>Delete deployment: <code>#deleteDeployment()</code>, <code>#deleteDeploymentCascade()</code></li> <li>Deployment query: <code>#createDeploymentQuery()</code></li> <li>Delete process definition: <code>#deleteProcessDefinition()</code></li> <li>Update process definition suspension state: <code>#updateProcessDefinitionSuspensionState()</code></li> </ul>"},{"location":"introduction/features.html#taskservice","title":"TaskService","text":"<ul> <li>Query for tasks: <code>#createTaskQuery()</code></li> <li>Task assignment: <code>#claim()</code>, <code>#defer()</code>, <code>#resolve()</code>, <code>#addCandidateGroup()</code>, <code>#deleteCandidateGroup()</code>, <code>#addCadidateUser()</code>, <code>#deleteCandidateUser()</code></li> <li>Identity links: <code>#addUserIdentityLink()</code>, <code>#addGroupIdentityLink()</code>, <code>#deleteUserIdentityLink()</code>, <code>#deleteGroupIdentityLink()</code>,</li> <li>Task completion: <code>#complete()</code></li> <li>Task deletion: <code>#deleteTasks()</code></li> <li>Task attributes: <code>#setPriority()</code>, <code>#setOwner()</code>, <code>#setAssignee()</code>, <code>#saveTask()</code></li> <li>Handling Errors and Escalation: <code>#handleBpmnError()</code>, <code>#handleEscalation()</code></li> <li>Read variables: <code>#getVariable()</code>,<code>#getVariables()</code>, <code>#getVariableTyped()</code>, <code>#getVariablesTyped()</code></li> <li>Read local variables: <code>#getVariableLocal()</code>,<code>#getVariablesLocal()</code>, <code>#getVariableLocalTyped()</code>, <code>#getVariablesLocalTyped()</code></li> <li>Write variables: <code>#setVariable()</code>,<code>#setVariables()</code>, <code>#setVariableTyped()</code>, <code>#setVariablesTyped()</code></li> <li>Delete variables: <code>#removeVariable()</code>,<code>#removeVariables()</code></li> <li>Write local variables: <code>#setVariableLocal()</code>,<code>#setVariablesLocal()</code>, <code>#setVariableLocalTyped()</code>, <code>#setVariablesLocalTyped()</code></li> <li>Delete local variables: <code>#removeVariableLocal()</code>,<code>#removeVariablesLocal()</code></li> </ul>"},{"location":"introduction/features.html#externaltaskservice","title":"ExternalTaskService","text":"<p>We are not aiming to replace the existing External Task Client, but still provide an alternative implementation for some methods.</p> <ul> <li>Complete a task by id: <code>#complete()</code></li> <li>Handle BPMN Errors: <code>#handleBpmnError()</code></li> <li>Handle failures: <code>#handleFailure()</code></li> </ul>"},{"location":"introduction/features.html#historyservice","title":"HistoryService","text":"<ul> <li>Historic process instance query: <code>#createHistoricProcessInstanceQuery()</code></li> </ul>"},{"location":"introduction/features.html#decisionservice","title":"DecisionService","text":"<ul> <li>Evaluate decision: <code>#evaluateDecisionById()</code>,<code>#evaluateDecisionByKey()</code></li> <li>Evaluate decision table: <code>#evaluateDecisionTableById()</code>,<code>#evaluateDecisionTableByKey()</code>.<code>#evaluateDecisionTableByKeyAndVersion()</code></li> </ul>"},{"location":"introduction/further-outlook.html","title":"Further Outlook","text":"<p>Support query methods of <code>RuntimeService</code> for:</p> <ul> <li>executions</li> <li>process instances</li> </ul> <p>Support methods of <code>ManagementService</code> for:</p> <ul> <li>jobs</li> <li>batches</li> </ul> <p>Is the library missing a feature important for you? Please report it.</p>"},{"location":"introduction/motivation.html","title":"Motivation","text":"<p>During the development of Camunda Platform 7 process applications you have to choose if your applications is either using Camunda Platform 7 Engine or is Camunda Platform 7 Engine. Depending on this decision, you are accessing Camunda Platform 7 via REST or Java API.</p> <p>While Camunda Engine Core API provides well-designed and easy-accessible programming interface for Java, the usage of REST interface requires additional development. In order to enable the usage of REST API from Java and allow for easy integration into Spring Boot applications, the Camunda Platform 7 REST Client Spring-Boot library has been developed.</p> <p>So instead of usage a hand-written or generated client, this library provides you the same access to a remote Camunda Platform 7 engine as the Java API provides to local Camunda. The difference between using and being disappears. </p>"},{"location":"introduction/solution.html","title":"Solution","text":"<p>The library uses the popular Java REST client OpenFeign embedded into Spring-Cloud-Feign-Starter and provides implementations of Java Camunda Platform 7 Engine Core API,  accessing the remote engine via REST API.</p> <p>In doing so, the remote version of the Camunda Engine API can be easily integrated in existing application using a SpringBoot Starter.</p> <p>Depending on your usage scenario, you can choose from two starters shipped by the library.</p>"},{"location":"user-guide/index.html","title":"Overview","text":"<p>The user guide consists of several sections.</p>"},{"location":"user-guide/index.html#examples","title":"Examples","text":"<ul> <li>Standalone Usage</li> <li>Usage inside a process application</li> </ul>"},{"location":"user-guide/index.html#configuration","title":"Configuration","text":"<ul> <li>Support Matrix</li> <li>Logging</li> <li>HTTP Error Decoding</li> </ul>"},{"location":"user-guide/error-decoding.html","title":"Error-Decoding","text":"<p>The <code>camunda-platform-7-rest-client-spring-boot</code> uses HTTP to access a remote Camunda Platform 7 REST API. If any errors occur on this access, Camunda Platform 7 REST API will send with corresponding HTTP error code and embed information about the error into http response. <code>camunda-platform-7-rest-client-spring-boot</code> tries to parse this response and throw an exception on the client side similar to the original exception thrown on the remote Camunda Platform 7 Engine.</p> <p>By default, the library tries to decode HTTP codes and will throw a <code>RemoteProcessEngineException</code>. If the response decoding was successful, the cause of the thrown <code>RemoteProcessEngineException</code> will be the instance of the exception class thrown on remote Camunda Platform 7 engine and the reason of the latter exception will be the original reason from the server. This behavior can be changed by configuration, so that the remotely thrown exception will be thrown locally, if the decoding was successful. For this the property <code>camunda.rest.client.error-decoding.wrap-exceptions</code> has to be set to false.</p> <p>If anything goes wrong on HTTP error decoding, the <code>RemoteProcessEngineException</code> will contain a generic message extracted from the REST call. If the error decoding is deactivated, <code>FeignException</code> is wrapping any exception occurring during the remote access.</p>"},{"location":"user-guide/error-decoding.html#configuration","title":"Configuration","text":"<p>By default, the HTTP error decoding is switched on and the library reacts on HTTP codes 400 and 500. Also by default all exceptions will be wrapped in a RemoteProcessEngineException. Those defaults can be changed by setting the following properties.</p> <p>In order to configure it, a block of properties e.g. in <code>application.yml</code> is required. Here are the defaults:</p> <pre><code>camunda:\n  rest:\n    client:\n      error-decoding:\n        enabled: true\n        http-codes: 400, 500\n        wrap-exceptions: true\n</code></pre> <p>Info</p> <p>If you are using the remote version of the <code>ExternalTaskService</code> this will report HTTP 404 if you try   to complete a non-existing task. By changing the <code>camunda.rest.client.error-decoding.http-codes</code> property you   can cover this response too.</p>"},{"location":"user-guide/examples.html","title":"Examples","text":""},{"location":"user-guide/examples.html#working-example","title":"Working example","text":"<p>We provide demonstrating the usage of the library, depending on the context.</p>"},{"location":"user-guide/examples.html#standalone-usage","title":"Standalone usage","text":"<p>The example demonstrates the usage of the library accessing a process engine via REST from an arbitrary SpringBoot application. The client executes the following steps:</p>"},{"location":"user-guide/examples.html#timing-overview-of-the-example","title":"Timing overview of the example","text":"Initial offset Repeat Invoked method 8.0 sec - Get deployed processes 10.0 sec 5 sec Start process 12.5 sec 5 sec Send signal 13.0 sec 5 sec Correlate message"},{"location":"user-guide/examples.html#how-does-it-work","title":"How does it work","text":"<p>The application uses the library by adding it to the classpath via Apache Maven dependency. That is:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.rest&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-platform-7-rest-client-spring-boot-starter&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>In order to activate the library, the <code>@EnableCamundaRestClient</code> has been put on the configuration class of the application. The interesting part is now the <code>ProcessClient</code> component. This Spring Component has several methods marked with <code>@Scheduled</code> annotation to demonstrate the time-based execution of desired functionality. To do so, the component has two injected resources, both marked with the <code>@Qualifier(\"remote\")</code> annotation. This annotation indicates that the remote version of the Camunda API services are used.</p> <p>In order to configure the library, a block of properties e.g. in <code>application.yml</code> is required. The values specify the location of the remote process engine:</p> <pre><code>feign:\n  client:\n    config:\n      default:\n        url: \"http://localhost:8083/engine-rest/\"\n</code></pre> <p>To run this example, you will need the server part from the next example. To activate the server part only, please run from command line:</p> <pre><code>mvn clean install\nmvn -f examples/example -Prun\nmvn -f examples/example-provided -Prun-server-only\n</code></pre>"},{"location":"user-guide/examples.html#usage-inside-a-process-application","title":"Usage inside a process application","text":"<p>The example demonstrates the usage of the library for accessing a process engine via REST from a Camunda Platform 7 process application. The key difference to the previous example is that the required Camunda classes are already present on the classpath and an engine is initialized and is running.</p> <p>Imagine the process engine has the following process deployed:</p> <p></p> <p>The client (running technically in the same JVM, but accessing the engine via REST) again executes the following steps:</p>"},{"location":"user-guide/examples.html#timing-overview-of-the-example_1","title":"Timing overview of the example","text":"Initial offset Repeat Invoked method 8.0 sec - Get deployed processes 10.0 sec 5 sec Start process 12.5 sec 5 sec Send signal 13.0 sec 5 sec Correlate message"},{"location":"user-guide/examples.html#how-does-it-work_1","title":"How does it work","text":"<p>The application uses the library by adding it to the classpath via Apache Maven dependency. That is:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.rest&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-platform-7-rest-client-spring-boot-starter-provided&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>NOTE:   Please note that we use a different starter. The suffix <code>provided</code> in the artifact name indicates that the engine         is already a part of the application and doesn't need to be put on classpath.</p> <p>In order to activate the library, the <code>@EnableCamundaRestClient</code> has been put on the configuration class of the application. The interesting part is now the <code>ProcessClient</code> component. This Spring Component has several methods marked with <code>@Scheduled</code> annotation to demonstrate the time-based execution of desired functionality. To do so, the component has two injected resources, both marked with the <code>@Qualifier(\"remote\")</code> annotation. This annotation indicates that the remote version of the Camunda API services are used.</p> <p>In order to configure the library, a block of properties e.g. in <code>application.yml</code> is required:</p> <pre><code>feign:\n  client:\n    config:\n      default:\n        url: \"http://localhost:8083/engine-rest/\"\n</code></pre>"},{"location":"user-guide/examples.html#usage-of-feign-clients","title":"Usage of feign clients","text":"<p>The example demonstrates the usage of the library for accessing the REST from a Camunda Platform 7 process application using the generated feign clients. The difference to the previous examples is that no Camunda dependency is required on the classpath, as the feign clients are used directly.</p>"},{"location":"user-guide/examples.html#how-does-it-work_2","title":"How does it work","text":"<p>The application uses the library by adding it to the classpath via Apache Maven dependency. That is:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.camunda.community.rest&lt;/groupId&gt;\n  &lt;artifactId&gt;camunda-platform-7-rest-client-spring-boot-openapi&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>In order to activate the library, the <code>@EnableCamundaFeignClients</code> has to be put on the configuration class of the application. The interesting part is now the <code>ProcessClient</code> component. This Spring Component has several methods marked with <code>@Scheduled</code> annotation to demonstrate the time-based execution of desired functionality. To do so, the component has injected the needed feign clients as resources.</p> <p>In order to configure the library, the same block of properties e.g. in <code>application.yml</code> as before is required:</p> <pre><code>feign:\n  client:\n    config:\n      ...\n</code></pre>"},{"location":"user-guide/logging.html","title":"Logging","text":"<p>OpenFeign library used in the <code>camunda-platform-7-rest-client-spring-boot</code> has a high-configurable logging facility. In order to configure it, a block of properties e.g. in <code>application.yml</code> is required:</p> <pre><code>logging:\n  level:\n    org.camunda.community.rest.client.RuntimeServiceClient: DEBUG\n    org.camunda.community.rest.client.RepositoryServiceClient: DEBUG\n    org.camunda.community.rest.client.ExternalTaskServiceClient: DEBUG\n</code></pre> <p>In order to enable Request/Response logging, you need to configure additional Feign logging by providing a factory bean:</p> <pre><code>import feign.Logger;\n\n@Configuration\npublic class MyConfiguration {\n    /**\n     * Full debug of feign client, including request/response\n     */\n    @Bean\n    public Logger.Level feignLoggerLevel() {\n        return Logger.Level.FULL;\n    }\n}\n</code></pre>"},{"location":"user-guide/support-matrix.html","title":"Support Martix","text":"<p>Here are currently implemented methods. The version behind the service name denotes the last version in which the service has been touched.</p>"},{"location":"user-guide/support-matrix.html#task-service-006","title":"Task Service @ 0.0.6","text":"<ul> <li><code># createTaskQuery</code></li> <li><code># claim</code></li> <li><code># deleteTask</code></li> <li><code># deleteTasks</code></li> <li><code># resolveTask</code></li> <li><code># complete</code></li> <li><code># saveTask</code></li> <li><code># setAssignee</code></li> <li><code># setPriority</code></li> <li><code># setVariable</code></li> <li><code># setVariables</code></li> <li><code># setVariableLocal</code></li> <li><code># setVariablesLocal</code></li> <li><code># getVariable</code></li> <li><code># getVariableLocal</code></li> <li><code># getVariableTyped</code></li> <li><code># getVariableLocal</code></li> <li><code># getVariableLocalTyped</code></li> <li><code># getVariables</code></li> <li><code># getVariablesLocal</code></li> <li><code># getVariablesTyped</code></li> <li><code># getVariablesLocalTyped</code></li> <li><code># removeVariable</code></li> <li><code># removeVariableLocal</code></li> <li><code># removeVariables</code></li> <li><code># removeVariablesLocal</code></li> <li><code># getIdentityLinksForTask</code></li> <li><code># addCandidateUser</code></li> <li><code># addCandidateGroup</code></li> <li><code># addUserIdentityLink</code></li> <li><code># addGroupIdentityLink</code></li> <li><code># deleteCandidateUser</code></li> <li><code># deleteCandidateGroup</code></li> <li><code># deleteUserIdentityLink</code></li> <li><code># deleteGroupIdentityLink</code></li> <li><code># handleBpmnError</code></li> <li><code># handleEscalation</code></li> </ul>"},{"location":"user-guide/support-matrix.html#runtime-service-007","title":"Runtime Service @ 0.0.7","text":"<ul> <li><code># startProcessInstanceByKey</code></li> <li><code># startProcessInstanceById</code></li> <li><code># correlateMessage</code></li> <li><code># createMessageCorrelation</code></li> <li><code># createProcessInstanceQuery</code></li> <li><code># signal</code></li> <li><code># signalEventReceived</code></li> <li><code># createSignalEvent</code></li> <li><code># getVariable</code></li> <li><code># getVariables</code></li> <li><code># setVariable</code></li> <li><code># setVariables</code></li> <li><code># removeVariable</code></li> <li><code># removeVariables</code></li> <li><code># getVariableTyped</code></li> <li><code># getVariablesTyped</code></li> <li><code># setVariableTyped</code></li> <li><code># setVariablesTyped</code></li> <li><code># getVariableLocal</code></li> <li><code># getVariablesLocal</code></li> <li><code># setVariableLocal</code></li> <li><code># setVariablesLocal</code></li> <li><code># removeVariableLocal</code></li> <li><code># removeVariablesLocal</code></li> <li><code># getVariableTypedLocal</code></li> <li><code># getVariablesTypedLocal</code></li> <li><code># setVariableTypedLocal</code></li> <li><code># setVariablesTypedLocal</code></li> <li><code># createIncidentQuery</code></li> <li><code># createIncident</code></li> <li><code># resolveIncident</code></li> <li><code># setAnnotationForIncidentById</code></li> <li><code># clearAnnotationForIncidentById</code></li> <li><code># suspendProcessInstanceByProcessDefinitionKey</code></li> <li><code># activateProcessInstanceByProcessDefinitionKey</code></li> <li><code># suspendProcessInstanceByProcessDefinitionId</code></li> <li><code># activateProcessInstanceByProcessDefinitionId</code></li> <li><code># suspendProcessInstanceById</code></li> <li><code># activateProcessInstanceById</code></li> <li><code># updateProcessInstanceSuspensionState</code></li> <li><code># deleteProcessInstance</code></li> <li><code># deleteProcessInstanceIfExists</code></li> <li><code># deleteProcessInstances</code></li> <li><code># deleteProcessInstancesIfExists</code></li> <li><code># deleteProcessInstancesAsync</code></li> </ul>"},{"location":"user-guide/support-matrix.html#repositoryservice-007","title":"RepositoryService @ 0.0.7","text":"<ul> <li><code># createProcessDefinitionQuery</code></li> <li><code># updateDecisionDefinitionHistoryTimeToLive</code></li> <li><code># updateProcessDefinitionHistoryTimeToLive</code></li> <li><code># createDeployment</code></li> <li><code># deleteDeployment</code></li> <li><code># deleteDeploymentCascade</code></li> <li><code># createDeploymentQuery</code></li> <li><code># deleteProcessDefinition</code></li> <li><code># updateProcessDefinitionSuspensionState</code></li> </ul>"},{"location":"user-guide/support-matrix.html#externaltaskservice-005","title":"ExternalTaskService @ 0.0.5","text":"<ul> <li><code># complete</code></li> <li><code># handleBpmnError</code></li> <li><code># handleFailure</code></li> </ul>"},{"location":"user-guide/support-matrix.html#historyservice-007","title":"HistoryService @ 0.0.7","text":"<ul> <li><code># createHistoricProcessInstanceQuery</code></li> </ul>"},{"location":"user-guide/support-matrix.html#decisionservice-7173","title":"DecisionService @ 7.17.3","text":"<ul> <li><code># evaluateDecisionById</code></li> <li><code># evaluateDecisionByKey</code></li> <li><code># evaluateDecisionTableById</code></li> <li><code># evaluateDecisionTableByKey</code></li> <li><code># evaluateDecisionTableByKeyAndVersion</code></li> </ul>"},{"location":"user-guide/support-matrix.html#runtimeservice-7173","title":"RuntimeService @ 7.17.3","text":"<ul> <li><code># createEventSubscriptionQuery</code></li> <li><code># createExecutionQuery</code></li> </ul>"}]}